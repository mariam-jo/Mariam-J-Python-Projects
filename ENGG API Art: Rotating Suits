import time
import network
from servo import Servo
import requests
import json
from neopixel import Neopixel
import machine
from machine import I2C
from lcd_api import LcdApi
from pico_i2c_lcd import I2cLcd
from machine import Pin


ssid = 'airuc-guest' # This should be ‘airuc-guest’ on campus Wi-Fi
#password = 'YOUR WIFI PASSSWORD HERE'
def connect():
# Connect to WLAN
# Connect function from https://projects.raspberrypi.org/en/projects/get-started-pico-w/2
    wlan = network.WLAN(network.STA_IF)
    wlan.active(True)
    wlan.connect(ssid) # Remove password if using airuc-guest

    while wlan.isconnected() == False:
        print('Waiting for connection...')
        time.sleep(1)
try:
    connect()
except KeyboardInterrupt:
    machine.reset()

print('Connected')



def get_new_deck():
    response_api = requests.get('https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1')
    deck_data = response_api.text
    parse_json_deck = json.loads(deck_data)
    #print(response_api.status_code)
    #print(parse_json_deck)
    id_deck = parse_json_deck['deck_id']
    #print(id_deck)
    return(id_deck)

def draw_card(id):
    draw_link = 'https://deckofcardsapi.com/api/deck/' + id + '/draw/?count=1'
    draw_api_response = requests.get(draw_link)
    draw_data = draw_api_response.text
    parse_json_draw = json.loads(draw_data)
    #print(draw_api_response.status_code)
    #print(parse_json_draw)
    card_value = parse_json_draw['cards'][0]['value']
    card_suit = parse_json_draw['cards'][0]['suit']
    card_remaining = parse_json_draw['remaining']
    card_stats = [card_value, card_suit, card_remaining]
    return(card_stats)

deck_id = get_new_deck()

numpix = 30
strip = Neopixel(numpix, 0, 28, "RGB") #gp pin used for input
#


red = (255, 0, 0)
orange = (255, 50, 0)
yellow = (255, 100, 0)
green = (0, 255, 0)
blue = (0, 0, 255)
indigo = (100, 0, 90)
violet = (200, 0, 100)
colors_rgb = [red, orange, yellow, green, blue, indigo, violet]

delay = 0.5
strip.brightness(100)
blank = (0,0,0)

        #deck_stats = ['ACE', 'HEARTS', 33]
        #if deck_stats[0] == 'ACE'
        
led_nums = {'ACE':1, '2':2, '3':3, '4':4, '5':12, '6':11, '7':10, '8':9,'9':8, '10':16, 'JACK':17, 'QUEEN':18, 'KING':19}


button = Pin(10, Pin.IN, Pin.PULL_DOWN)
sg_servo = Servo(pin=0)


sg_servo = Servo(pin=0)
sg_servo.move(0)
strip.fill((0,0,0))
strip.show()
print('Reset servo & lights') 



# 16 x 2 LCD I2C Sample Code
# Library from https://github.com/T-622/RPI-PICO-I2C-LCD

# See library GitHub repository for full list of functions and their use

I2C_ADDR     = 0x27
I2C_NUM_ROWS = 2
I2C_NUM_COLS = 16

sda = machine.Pin(8)
scl = machine.Pin(9) # NOTE: It is important you change this to match the SDA and SCL pins you are using.
i2c_controller = 0   # Also change this to match the controller you are using (Listed on the Raspberry Pi Pico W Pinout as "I2C0" or "I2C1")
                      # You will need to wire the LCD to your Pi Pico, ensuring that each pin goes to the correct header. The pinout should be written on the LCDs PCB.
                   # You can use either 5V power via VBUS or 3.3V power via either VSYS or 3V(OUT)
i2c = I2C(i2c_controller, sda=sda, scl=scl, freq=400000) 
lcd = I2cLcd(i2c, I2C_ADDR, I2C_NUM_ROWS, I2C_NUM_COLS)
    
    
    
testString = "Press the button"

for i in range(len(testString) - 15):
    lcd.putstr(testString[i:i+16])
    time.sleep(0.6)
    lcd.move_to(0,0)
    break
    

while True:
    if button.value():
        deck_stats = draw_card(deck_id)
        print(deck_id)
        print(deck_stats)
        if deck_stats[2] == 0:
            deck_id = get_new_deck()
        #time.sleep(0.5)
    
#If suit = heart move 5 degrees
#Then move -5 degrees

        #deck_stats = ['ACE', 'HEARTS', 33]
        #if deck_stats[0] == 'ACE'


        if (deck_stats[1] == 'HEARTS') or (deck_stats[1] == 'DIAMONDS'):
            strip.set_pixel(led_nums[deck_stats[0]], colors_rgb[3])
            strip.set_pixel(28, colors_rgb[3])
            strip.set_pixel(29, colors_rgb[3])
            strip.show()
            time.sleep(4)
            #strip.fill((0,0,0))
            #strip.show()


        if (deck_stats[1] == 'CLUBS') or (deck_stats[1] == 'SPADES'):
            strip.set_pixel(led_nums[deck_stats[0]], colors_rgb[4])
            strip.set_pixel(28, colors_rgb[4])
            strip.set_pixel(29, colors_rgb[4])
            strip.show()
            time.sleep(4)
            #strip.fill((0,0,0))
            #strip.show()
            
        if deck_stats[1] == "HEARTS":
            sg_servo.move(5)
            time.sleep(10)
            #sg_servo.move(0)
            #time.sleep(3)
    #stop#

  #If suit = space move 45
  #then move -45 degrees
        elif deck_stats[1] == "SPADES":
            sg_servo.move(30)
            time.sleep(10)
            #sg_servo.move(0)
            #time.sleep(3)

  #if suit = diamond move 135
  #then move -135
        elif deck_stats[1] == "DIAMONDS":
            sg_servo.move(45)
            time.sleep(10)
            #sg_servo.move(0)
            #time.sleep(3)

  #if suit = club move 175
  #then move -175
        else:
            #deck_stats[1] == "CLUBS":
            sg_servo.move(175)
            time.sleep(10)
            #sg_servo.move(0)
            #time.sleep(3)

        strip.fill((0,0,0))
        strip.show()
        sg_servo.move(0)
        print('push again')
            
        for i in range(len(testString) - 15):
            lcd.putstr(testString[i:i+16])
            time.sleep(0.6)
            lcd.move_to(0,0)
